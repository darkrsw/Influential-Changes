
@article{al.2002,
    author = {Nitesh V. Chawla et. al.},
    journal = {Journal of Artificial Intelligence Research},
    pages = {321-357},
    title = {Synthetic Minority Over-sampling Technique},
    volume = {16},
    year = {2002}
 }

@inproceedings{ngamkajornwiwat_exploratory_2008,
	title = {An Exploratory Study on the Evolution of {OSS} Developer Communities},
	doi = {10.1109/HICSS.2008.58},
	abstract = {Software is developed in a dynamic context where team structure, requirements, and processes evolve together with the product. Although researchers have been studying the evolution of software systems since the early 70s, the study on the evolution of software development teams remains rare. Such evolutionary patterns and their impact on software quality are especially important in the context of {OSS} (Open Source Software) development, where a group of volunteer developers collaborate online for an extended period of time. By analyzing how social networks of developers evolve over time while building {OSS} products, we can gain knowledge and experience to improve the effectiveness and efficiency of resource management and distribution in future {OSS} projects. To this end, we studied the evolution of the developer communities using a suite of {OSS} products developed under the {KOffice} project. We found that in general, the social networks of {OSS} developer communities change over time in certain ways. Identifying such patterns can help {OSS} managers better understand the unique process of {OSS} development and improve their management and coordination of the projects.},
	booktitle = {Hawaii International Conference on System Sciences, Proceedings of the 41st Annual},
	author = {Ngamkajornwiwat, K. and Zhang, Dongsong and Koru, A.G. and Zhou, Lina and Nolker, R.},
	month = jan,
	year = {2008},
	keywords = {Collaborative software, Complex networks, Information systems, International collaboration, Open source software, {OSS} development, Programming, Project management, public domain software, Quality management, resource allocation, resource distribution, Resource management, social networks, Social network services, software development, Software development management, software evolutionary patterns, software quality, Software systems},
	pages = {305--305},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/BKWIKFNE/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/64SSHEB9/Ngamkajornwiwat et al. - 2008 - An Exploratory Study on the Evolution of OSS Devel.pdf:application/pdf}
}

@inproceedings{onoue_study_2013,
	title = {A Study of the Characteristics of Developers' Activities in {GitHub}},
	doi = {10.1109/APSEC.2013.104},
	abstract = {What types of developers do active software projects have? This paper presents a study of the characteristics of developers' activities in open source software development. {GitHub}, a widely-used hosting service for software development projects, provides {APIs} for collecting various kinds of {GitHub} data. To clarify the characteristics of developers' activities, we used these {APIs} to investigate {GitHub} events generated by each developer. Using this information, we categorized developers based on measures such as whether they prefer communication by coding or comments, or whether they are specialists or generalists. Our study indicates that active software projects have various kinds of developers characterized by different types of development activities.},
	booktitle = {Software Engineering Conference ({APSEC}, 2013 20th Asia-Pacific},
	author = {Onoue, S. and Hata, H. and Matsumoto, K.-I.},
	month = dec,
	year = {2013},
	keywords = {active software projects, api, application program interfaces, Blogs, Encoding, {GitHub} data, Gold, Open source software, open source software development, privacy, public domain software, Radar, software development projects, software engineering},
	pages = {7--12},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/N7FZK9HB/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/GWKFKUKI/Onoue et al. - 2013 - A Study of the Characteristics of Developers' Acti.pdf:application/pdf}
}

@inproceedings{pham_creating_2013,
	address = {Piscataway, {NJ}, {USA}},
	series = {{ICSE} '13},
	title = {Creating a Shared Understanding of Testing Culture on a Social Coding Site},
	isbn = {978-1-4673-3076-3},
	url = {http://dl.acm.org.proxy.bnl.lu/citation.cfm?id=2486788.2486804},
	abstract = {Many software development projects struggle with creating and communicating a testing culture that is appropriate for the project's needs. This may degrade software quality by leaving defects undiscovered. Previous research suggests that social coding sites such as {GitHub} provide a collaborative environment with a high degree of social transparency. This makes developers' actions and interactions more visible and traceable. We conducted interviews with 33 active users of {GitHub} to investigate how the increased transparency found on {GitHub} influences developers' testing behaviors. Subsequently, we validated our findings with an online questionnaire that was answered by 569 members of {GitHub}. We found several strategies that software developers and managers can use to positively influence the testing behavior in their projects. However, project owners on {GitHub} may not be aware of them. We report on the challenges and risks caused by this and suggest guidelines for promoting a sustainable testing culture in software development projects.},
	urldate = {2014-04-28},
	booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
	publisher = {{IEEE} Press},
	author = {Pham, Raphael and Singer, Leif and Liskin, Olga and Figueira Filho, Fernando and Schneider, Kurt},
	year = {2013},
	pages = {112--121},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/V2ZQIV94/Pham et al. - 2013 - Creating a Shared Understanding of Testing Culture.pdf:application/pdf}
}

@inproceedings{venkataramani_discovery_2013,
	address = {Republic and Canton of Geneva, Switzerland},
	series = {{WWW} '13 Companion},
	title = {Discovery of Technical Expertise from Open Source Code Repositories},
	isbn = {978-1-4503-2038-2},
	url = {http://dl.acm.org.proxy.bnl.lu/citation.cfm?id=2487788.2487832},
	abstract = {Online Question and Answer websites for developers have emerged as the main forums for interaction during the software development process. The veracity of an answer in such websites is typically verified by the number of 'upvotes' that the answer garners from peer programmers using the same forum. Although this mechanism has proved to be extremely successful in rating the usefulness of the answers, it does not lend itself very elegantly to model the expertise of a user in a particular domain. In this paper, we propose a model to rank the expertise of the developers in a target domain by mining their activity in different opensource projects. To demonstrate the validity of the model, we built a recommendation system for {StackOverflow} which uses the data mined from {GitHub}.},
	urldate = {2014-04-28},
	booktitle = {Proceedings of the 22Nd International Conference on World Wide Web Companion},
	publisher = {International World Wide Web Conferences Steering Committee},
	author = {Venkataramani, Rahul and Gupta, Atul and Asadullah, Allahbaksh and Muddu, Basavaraju and Bhat, Vasudev},
	year = {2013},
	keywords = {{GitHub}, knowledge discovery, recommendations, source code repository, stackoverflow, technical expertise},
	pages = {97--98},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/2NR8KWGE/Venkataramani et al. - 2013 - Discovery of Technical Expertise from Open Source .pdf:application/pdf;ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/V2PWEJRF/Venkataramani et al. - 2013 - Discovery of Technical Expertise from Open Source .pdf:application/pdf}
}

@inproceedings{datta_evolution_2011,
	address = {New York, {NY}, {USA}},
	series = {{ISEC} '11},
	title = {Evolution of Developer Collaboration on the Jazz Platform: A Study of a Large Scale Agile Project},
	isbn = {978-1-4503-0559-4},
	shorttitle = {Evolution of Developer Collaboration on the Jazz Platform},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/1953355.1953359},
	doi = {10.1145/1953355.1953359},
	abstract = {Collaboration is a key aspect of the agile philosophy of software development. As a software system matures over iterations, trends of developer collaboration can offer valuable insights into project dynamics. In this paper, we study evolution of developer collaboration for a large scale agile project on the Jazz platform. We construct networks of collaboration based on developer affiliations across comments on work items and file changes; and then compare parameters of such networks with established results from networks of scientific collaborations. The comparisons illuminate interesting facets of developer collaboration on the Jazz platform. Such perception helps deeper understanding of the role of interaction in agile projects, as well as more effective project governance.},
	urldate = {2014-04-28},
	booktitle = {Proceedings of the 4th India Software Engineering Conference},
	publisher = {{ACM}},
	author = {Datta, Subhajit and Sindhgatta, Renuka and Sengupta, Bikram},
	year = {2011},
	keywords = {agile development, Collaboration, jazz, social network analysis, software teams},
	pages = {21--30},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/P2RP5ZSN/Datta et al. - 2011 - Evolution of Developer Collaboration on the Jazz P.pdf:application/pdf}
}

@inproceedings{kumar_evolution_2013,
	address = {New York, {NY}, {USA}},
	series = {{ISEC} '13},
	title = {Evolution of Developer Social Network and Its Impact on Bug Fixing Process},
	isbn = {978-1-4503-1987-4},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/2442754.2442764},
	doi = {10.1145/2442754.2442764},
	abstract = {Universally accessible and publically archived nature of Bug Tracking System ({BTS}) of Open Source Software enables developers to follow the work of each other and contribute in bug fixing. The interaction of developers through comments on {BTS} of project leads to form a social network. The developers and their relationships change over the time resulting in evolution of Developers' social network ({DSN}). Prior studies (Hong et.al) have compared the evolution of {DSN} with evolution of general social networks like facebook, twitter etc., showing their resemblance and some differences with them. However these studies don't provide any insight how the evolution of {DSN} correlate with the effectiveness of bug fixing process over the time. Such insight is helpful as managers can reorganize the teams and issue the guidelines to the developers, accordingly, forcing the communication structure which results in to more effective bug fixing process. In this paper, we first study the evolution of {DSN} of Eclipse a java based {IDE}, partially replicating and enhancing the study done by Hong et. al. Then we show how the global social network properties of the {DSN} e.g. Average Path Length, Clustering Coefficient, modularity etc. has an impact on attributes characterizing effectiveness of bug fixing process like average fix time of the bugs, percentage of bugs fixed etc. We found good correlation between global social network properties and attributes characterizing the bug fixing process.},
	urldate = {2014-04-28},
	booktitle = {Proceedings of the 6th India Software Engineering Conference},
	publisher = {{ACM}},
	author = {Kumar, Amit and Gupta, Avdhesh},
	year = {2013},
	keywords = {bug fixing process, bug tracking system, developer social network, {ECLIPSE}, global social network properties, netbeans},
	pages = {63--72},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/CMQ6SRJH/Kumar and Gupta - 2013 - Evolution of Developer Social Network and Its Impa.pdf:application/pdf}
}

@inproceedings{robles_evolution_2009,
	title = {Evolution of the core team of developers in libre software projects},
	doi = {10.1109/MSR.2009.5069497},
	abstract = {In many libre (free, open source) software projects, most of the development is performed by a relatively small number of persons, the ldquocore teamrdquo. The stability and permanence of this group of most active developers is of great importance for the evolution and sustainability of the project. In this position paper we propose a quantitative methodology to study the evolution of core teams by analyzing information from source code management repositories. The most active developers in different periods are identified, and their activity is calculated over time, looking for core team evolution patterns.},
	booktitle = {6th {IEEE} International Working Conference on Mining Software Repositories, 2009. {MSR} '09},
	author = {Robles, G. and Gonzalez-Barahona, J.M. and Herraiz, I.},
	month = may,
	year = {2009},
	keywords = {Computer industry, core team, Databases, Design methodology, free software, History, Information analysis, information retrieval, libre software projects, Open source software, public domain software, Software development management, Software performance, source code management repositories, Stability, Visualization},
	pages = {167--170},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/GWW78DFM/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/2P3QGIEG/Robles et al. - 2009 - Evolution of the core team of developers in libre .pdf:application/pdf}
}

@inproceedings{wu_exploring_2014,
	address = {New York, {NY}, {USA}},
	series = {{CSCW} Companion '14},
	title = {Exploring the Ecosystem of Software Developers on {GitHub} and Other Platforms},
	isbn = {978-1-4503-2541-7},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/2556420.2556483},
	doi = {10.1145/2556420.2556483},
	abstract = {{GitHub} provides various social features for developers to collaborate with others. Those features are important for developers to coordinate their work (Dabbish et al., 2012; Marlow et al., 2013). We hypothesized that the social system of {GitHub} users was bound by system interactions such that contributing to similar code repositories would lead to users following one another on {GitHub} or vice versa. Using a quadratic assignment procedure ({QAP}) correlation, however, only a weak correlation among followship and production activities (code, issue, and wiki contributions) was found. Survey with {GitHub} users revealed an ecosystem on the Internet for software developers, which includes many platforms, such as Forrst, Twitter, and Hacker News, among others. Developers make social introductions and other interactions on these platforms and engage with one anther on {GitHub}. Due to these preliminary findings, we describe {GitHub} as a part of a larger ecosystem of developer interactions.},
	urldate = {2014-04-28},
	booktitle = {Proceedings of the Companion Publication of the 17th {ACM} Conference on Computer Supported Cooperative Work \&\#38; Social Computing},
	publisher = {{ACM}},
	author = {Wu, Yu and Kropczynski, Jessica and Shih, Patrick C. and Carroll, John M.},
	year = {2014},
	keywords = {ecosystem, follow, {GitHub}, social connection},
	pages = {265--268},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/ZCSBXBTH/Wu et al. - 2014 - Exploring the Ecosystem of Software Developers on .pdf:application/pdf}
}

@inproceedings{heiskanen_gatekeepers_1992,
	address = {New York, {NY}, {USA}},
	series = {{SIGCPR} '92},
	title = {Gatekeepers in the Action Structure of Software Contracting: A Case Study of the Evolution of User-developer Relationships},
	isbn = {0-89791-500-3},
	shorttitle = {Gatekeepers in the Action Structure of Software Contracting},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/144001.144015},
	doi = {10.1145/144001.144015},
	urldate = {2014-04-28},
	booktitle = {Proceedings of the 1992 {ACM} {SIGCPR} Conference on Computer Personnel Research},
	publisher = {{ACM}},
	author = {Heiskanen, Ari and Similä, Jouni},
	year = {1992},
	pages = {11--25},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/G8M7TJPG/Heiskanen and Similä - 1992 - Gatekeepers in the Action Structure of Software Co.pdf:application/pdf}
}

@inproceedings{lee_github_2013,
	address = {New York, {NY}, {USA}},
	series = {{CHI} {EA} '13},
	title = {{GitHub} Developers Use Rockstars to Overcome Overflow of News},
	isbn = {978-1-4503-1952-2},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/2468356.2468381},
	doi = {10.1145/2468356.2468381},
	abstract = {Keeping track of a constantly updating stream of news items on social networking enabled software development sites may be difficult. We analyzed the actions of 544 {GitHub}.com developers working across 5,657 projects to examine how the network of developers and projects influence where developers choose to contribute. Our analyses revealed the existence of a group of extremely well connected developers, or rockstars. We found that these rockstars': 1) actions have a greater influence on their followers compared to regular developers, 2) type of action affect their followers differently, 3) influence on followers may depend on a project's age, 4) increased activity on a project increases activity by followers, and 5) followers use as guides to projects to work on. We discuss the implications of these findings to the design of software development environments.},
	urldate = {2014-04-28},
	booktitle = {{CHI} '13 Extended Abstracts on Human Factors in Computing Systems},
	publisher = {{ACM}},
	author = {Lee, Michael J. and Ferwerda, Bruce and Choi, Junghong and Hahn, Jungpil and Moon, Jae Yun and Kim, Jinwoo},
	year = {2013},
	keywords = {{GitHub}, open source, social coding, social computing},
	pages = {133--138},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/Q9I36GE2/Lee et al. - 2013 - GitHub Developers Use Rockstars to Overcome Overfl.pdf:application/pdf}
}

@inproceedings{choi_herding_2013,
	address = {New York, {NY}, {USA}},
	series = {{CSCW} '13},
	title = {Herding in Open Source Software Development: An Exploratory Study},
	isbn = {978-1-4503-1332-2},
	shorttitle = {Herding in Open Source Software Development},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/2441955.2441989},
	doi = {10.1145/2441955.2441989},
	abstract = {In spite of the lack of organizational control, a large number of these self-organized groups have successfully developed high quality software in open source software projects. We examined the process through which coordinated action emerges from the collection of individual developers' choices, i.e., how bottom-up coordination occurs and argue that developer herding on a social coding platform may have a positive impact on {OSSD} outcomes. As an exploratory study, we analyzed the participation patterns in 10 randomly sampled {OSSD} projects on a social open source code foundry, Github. Based on the findings we generate theoretical propositions regarding developer herding behavior in {OSSD}.},
	urldate = {2014-04-28},
	booktitle = {Proceedings of the 2013 Conference on Computer Supported Cooperative Work Companion},
	publisher = {{ACM}},
	author = {Choi, Joohee and Choi, Junghong and Moon, Jae Yun and Hahn, Jungpil and Kim, Jinwoo},
	year = {2013},
	keywords = {Collaboration, collaborative software development, coordination, open source software development, social computing},
	pages = {129--134},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/FK432JRU/Choi et al. - 2013 - Herding in Open Source Software Development An Ex.pdf:application/pdf}
}


@inproceedings{harder_how_2013,
	title = {How Multiple Developers Affect the Evolution of Code Clones},
	doi = {10.1109/ICSM.2013.14},
	abstract = {The use of copy and paste in programming causes redundant passages of source code. The effect such clones have on software quality and maintainability in particular has been subject to various studies in the recent past. Although negative effects could not be confirmed in general, a non-negligible number of situations where clones did cause problems has been found. Hence, there may be yet unknown influencing factors that cause these problems. One such factor may be the number of developers involved in the creation and maintenance of a clone. The interaction of multiple developers, unevenly distributed knowledge and communication deficiencies may lead to unwanted inconsistencies and bugs, when the clones are changed. This paper presents an empirical study on long-lived software systems, in which we analyze how many developers are involved in the maintenance exact clones and whether the number of developers affects the likelihood of inconsistent changes. Our results indicate that differences between single-author and multi-author clones exist. Nevertheless, we did not find multiple developers to be the cause of problematic changes to clones.},
	booktitle = {2013 29th {IEEE} International Conference on Software Maintenance ({ICSM})},
	author = {Harder, J.},
	month = sep,
	year = {2013},
	keywords = {clone maintenance, Cloning, code authorship, code clones, Computer bugs, History, human factors, long-lived software systems, Maintenance engineering, measurement, multiauthor clones, multiple developers, Programming, single-author clones, software evolution, software maintenance, software quality, Software systems},
	pages = {30--39},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/WSAVAPJG/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/AQDCQAND/Harder - 2013 - How Multiple Developers Affect the Evolution of Co.pdf:application/pdf}
}

@inproceedings{marlow_impression_2013,
	address = {New York, {NY}, {USA}},
	series = {{CSCW} '13},
	title = {Impression Formation in Online Peer Production: Activity Traces and Personal Profiles in Github},
	isbn = {978-1-4503-1331-5},
	shorttitle = {Impression Formation in Online Peer Production},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/2441776.2441792},
	doi = {10.1145/2441776.2441792},
	abstract = {In this paper we describe a qualitative investigation of impression formation in an online distributed software development community with social media functionality. We find that users in this setting seek out additional information about each other to explore the project space, inform future interactions, and understand the potential future value of a new person. They form impressions around other users' expertise based on history of activity across projects, and successful collaborations with key high status projects in the community. These impressions influence their receptivity to strangers' work contributions.},
	urldate = {2014-04-28},
	booktitle = {Proceedings of the 2013 Conference on Computer Supported Cooperative Work},
	publisher = {{ACM}},
	author = {Marlow, Jennifer and Dabbish, Laura and Herbsleb, Jim},
	year = {2013},
	keywords = {activity traces, collaborative software development, impression formation, peer production},
	pages = {117--128},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/CT6J3AMA/Marlow et al. - 2013 - Impression Formation in Online Peer Production Ac.pdf:application/pdf}
}

@inproceedings{weicheng_mining_2013,
	title = {Mining {GitHub}: Why Commit Stops – Exploring the Relationship between Developer's Commit Pattern and File Version Evolution},
	shorttitle = {Mining {GitHub}},
	doi = {10.1109/APSEC.2013.133},
	abstract = {Using the freeware in {GitHub}, we are often confused by a phenomenon: the new version of {GitHub} freeware usually was released in an indefinite frequency, and developers often committed nothing for a long time. This evolution phenomenon interferes with our own development plan and architecture design. Why do these updates happen at that time? Can we predict {GitHub} software version evolution by developers' activities? This paper aims to explore the developer commit patterns in {GitHub}, and try to mine the relationship between these patterns (if exists) and code evolution. First, we define four metrics to measure commit activity and code evolution: the changes in each commit, the time between two commits, the author of each changes, and the source code dependency. Then, we adopt visualization techniques to explore developers' commit activity and code evolution. Visual techniques are used to describe the progress of the given project and the authors' contributions. To analyze the commit logs in {GitHub} software repository automatically, Commits Analysis Tool ({CAT}) is designed and implemented. Finally, eight open source projects in {GitHub} are analyzed using {CAT}, and we find that: 1) the file changes in the previous versions may affect the file depend on it in the next version, 2) the average days around "huge commit" is 3 times of that around normal commit. Using these two patterns and developer's commit model, we can predict when his next commit comes and which file may be changed in that commit. Such information is valuable for project planning of both {GitHub} projects and other projects which use {GitHub} freeware to develop software.},
	booktitle = {Software Engineering Conference ({APSEC}, 2013 20th Asia-Pacific},
	author = {Weicheng, Yang and Beijun, Shen and Ben, Xu},
	month = dec,
	year = {2013},
	keywords = {{CAT}, code evolution, commit pattern, commits analysis tool, data mining, data visualisation, Data visualization, file version evolution, {GitHub}, {GitHub} freeware, {GitHub} software repository mining, {GitHub} software version evolution, History, Java, measurement, open source project, pattern mining, repository mining, Software, software maintenance, version evolution, Visualization, visualization technique, visualization technology},
	pages = {165--169},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/XR4GSI2G/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/VUA56VC7/Weicheng et al. - 2013 - Mining GitHub Why Commit Stops – Exploring the Re.pdf:application/pdf}
}

@inproceedings{capiluppi_models_2003,
	title = {Models for the evolution of {OS} projects},
	doi = {10.1109/ICSM.2003.1235407},
	abstract = {Software evolution and maintenance is largely based on data gathered through years of experience: understanding and improving software is often a matter of how much data is available. Open source software offers the opportunity to analyze closely all the phases in the evolution of a project. What's more, data regarding its evolution is generally available for inspections. Based on simply code analyses, lots of questions about its efficiencies can't be resolved. It would be necessary to study the process from the inside, understanding who or what drove what improvement and so on. Still a quantitative analysis gives several insights about how much code is created and evolved by developers. This study takes a sample of 12 open source projects and gives some statistics to analyze their evolution. The purpose is here to compare what is commonly know in software evolution in traditional environments, and what happens instead in open environments.},
	booktitle = {International Conference on Software Maintenance, 2003. {ICSM} 2003. Proceedings},
	author = {Capiluppi, A.},
	month = sep,
	year = {2003},
	keywords = {Application software, code analysis, Data models, Environmental economics, Inspection, Linux, Open source software, Operating systems, {OS} projects, Portals, programming environments, Programming profession, quantitative analysis, software development, Software development management, software evolution, software improvement, software maintenance, software process improvement, software understanding, statistical analysis},
	pages = {65--74},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/FSAAKJXZ/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/QWCEPHTK/Capiluppi - 2003 - Models for the evolution of OS projects.pdf:application/pdf}
}

@inproceedings{robles_modification_2012,
	title = {Modification and developer metrics at the function level: Metrics for the study of the evolution of a software project},
	shorttitle = {Modification and developer metrics at the function level},
	doi = {10.1109/WETSoM.2012.6226993},
	abstract = {Software evolution, and particularly its growth, has been mainly studied at the file (also sometimes referred as module) level. In this paper we propose to move from the physical towards a level that includes semantic information by using functions or methods for measuring the evolution of a software system. We point out that use of functions-based metrics has many advantages over the use of files or lines of code. We demonstrate our approach with an empirical study of two Free/Open Source projects: a community-driven project, Apache, and a company-led project, Novell Evolution. We discovered that most functions never change; when they do their number of modifications is correlated with their size, and that very few authors who modify each; finally we show that the departure of a developer from a software project slows the evolution of the functions that she authored.},
	booktitle = {2012 3rd International Workshop on Emerging Trends in Software Metrics ({WETSoM})},
	author = {Robles, G. and Herraiz, I. and German, D.M. and Izquierdo-Cortazar, D.},
	month = jun,
	year = {2012},
	keywords = {{APACHE}, community-driven project, company-led project, developer metrics, Educational institutions, free project, functions, functions-based metrics, Maintenance engineering, metrics, mining software repositories, modification metrics, Novell Evolution, open source project, Project management, public domain software, semantic information, Semantics, software evolution, software maintenance, Software measurement, software metrics, software project evolution, software repository, software system evolution, Web servers},
	pages = {49--55},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/RX43UVJV/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/423GTM7F/Robles et al. - 2012 - Modification and developer metrics at the function.pdf:application/pdf}
}

@inproceedings{chen_module-based_2008,
	title = {Module-based large-scale software evolution based on complex networks},
	doi = {10.1109/CIT.2008.4594776},
	abstract = {Large-scale software systems usually consist of a huge number of modules, and have a series of releases along with these modules. This can be seen as software evolution. In recent years, researchers have put forward several models of software evolution by employing the theory of complex networks. In this paper, we put forward a refined model of software evolution based on the {BA} model: module-based evolution. We theoretically prove that the power-law degree distribution can be held in our model. We also build a tool to construct and analyze the class diagrams of {JDK} (Java Development Kits) evolved from version 1.2 to 1.6. The class diagrams can be seen as complex networks under evolution. We apply the module-based evolution model to these complex networks and simulate the evolution of key network features such as average clustering coefficient and average path length. Compared with real networks, our model can precisely describe the evolution of these features, and be used to help developers understand the characteristics of large-scale software evolution.},
	booktitle = {8th {IEEE} International Conference on Computer and Information Technology, 2008. {CIT} 2008},
	author = {Chen, Tao and Gu, Qing and Wang, Shusen and Chen, Xiaoan and Chen, Daoxu},
	month = jul,
	year = {2008},
	keywords = {Biological system modeling, class diagrams, Complex networks, complex networks theory, Computer science, Evolution (biology), Java, Java Development Kit, Laboratories, large-scale software systems, Large-scale systems, module-based evolution, module-based large-scale software evolution, network theory (graphs), object-oriented programming, power law degree distribution, Power system modeling, software maintenance, Software systems},
	pages = {798--803},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/DQINW5UI/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/I6F66KZ3/Chen et al. - 2008 - Module-based large-scale software evolution based .pdf:application/pdf}
}

@inproceedings{thung_network_2013,
	title = {Network Structure of Social Coding in {GitHub}},
	doi = {10.1109/CSMR.2013.41},
	abstract = {Social coding enables a different experience of software development as the activities and interests of one developer are easily advertised to other developers. Developers can thus track the activities relevant to various projects in one umbrella site. Such a major change in collaborative software development makes an investigation of networkings on social coding sites valuable. Furthermore, project hosting platforms promoting this development paradigm have been thriving, among which {GitHub} has arguably gained the most momentum. In this paper, we contribute to the body of knowledge on social coding by investigating the network structure of social coding in {GitHub}. We collect 100,000 projects and 30,000 developers from {GitHub}, construct developer-developer and project-project relationship graphs, and compute various characteristics of the graphs. We then identify influential developers and projects on this sub network of {GitHub} by using {PageRank}. Understanding how developers and projects are actually related to each other on a social coding site is the first step towards building tool supports to aid social programmers in performing their tasks more efficiently.},
	booktitle = {2013 17th European Conference on Software Maintenance and Reengineering ({CSMR})},
	author = {Thung, F. and Bissyande, T.F. and Lo, D. and Jiang, Lingxiao},
	month = mar,
	year = {2013},
	keywords = {building tool support, collaborative software development, developer-developer network, developer-developer relationship graph, development paradigm, {GitHub}, graph theory, groupware, network structure, pagerank, project hosting platform, project-project network, project-project relationship graph, social coding, social coding site, social networking (online), social programmer, software engineering, umbrella site},
	pages = {323--326},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/3WCVV2FJ/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/JTA8DRJE/Thung et al. - 2013 - Network Structure of Social Coding in GitHub.pdf:application/pdf}
}

@inproceedings{mcdonald_performance_2013,
	address = {New York, {NY}, {USA}},
	series = {{CHI} {EA} '13},
	title = {Performance and Participation in Open Source Software on {GitHub}},
	isbn = {978-1-4503-1952-2},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/2468356.2468382},
	doi = {10.1145/2468356.2468382},
	abstract = {A few studies have attempted to provide metrics of success in open source software ({OSS}) projects but the role a code hosting workspace plays in how performance is viewed and measured is little examined. We conducted qualitative, exploratory research with lead and core developers on three successful projects on {GitHub} to understand how {OSS} communities on {GitHub} measure success. These results were obtained in connection with a larger project that is designed to understand the structure of code hosting platforms in relation to participation and performance. We report two main findings. First, lead and core members of the projects we interviewed display a nuanced understanding of community participation in their assessment of success. Second, they attribute increased participation on their projects to the features and usability provided by {GitHub}.},
	urldate = {2014-04-28},
	booktitle = {{CHI} '13 Extended Abstracts on Human Factors in Computing Systems},
	publisher = {{ACM}},
	author = {McDonald, Nora and Goggins, Sean},
	year = {2013},
	keywords = {Open source software, performance, social computing},
	pages = {139--144},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/FHZS99DB/McDonald and Goggins - 2013 - Performance and Participation in Open Source Softw.pdf:application/pdf}
}

@inproceedings{loyola_population_2014,
	address = {Republic and Canton of Geneva, Switzerland},
	series = {{WWW} Companion '14},
	title = {Population Dynamics in Open Source Communities: An Ecological Approach Applied to Github},
	isbn = {978-1-4503-2745-9},
	shorttitle = {Population Dynamics in Open Source Communities},
	url = {http://dx.doi.org.proxy.bnl.lu/10.1145/2567948.2578843},
	doi = {10.1145/2567948.2578843},
	abstract = {Open Source Software ({OSS}) has gained high amount of popularity during the last few years. It is becoming used by public and private institutions, even companies release portions of their code to obtain feedback from the community of voluntary developers. As {OSS} is based on the voluntary contributions of developers, the number of participants represents one of the key elements that impact the quality of the software. In order to understand how the the population of contributors evolve over time, we propose a methodology that adapts Lotka-Volterra-based biological models used for describing host-parasite interactions. Experiments based on data from the Github collaborative platform showed that the proposed approach performs effectively in terms of providing an estimation of the population of developers for each project over time.},
	urldate = {2014-04-28},
	booktitle = {Proceedings of the Companion Publication of the 23rd International Conference on World Wide Web Companion},
	publisher = {International World Wide Web Conferences Steering Committee},
	author = {Loyola, Pablo and Ko, In-Young},
	year = {2014},
	keywords = {biological mutualism, ecological models, open source software development},
	pages = {993--998},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/SUWABUIE/Loyola and Ko - 2014 - Population Dynamics in Open Source Communities An.pdf:application/pdf}
}

@inproceedings{stopford_simulating_2009,
	title = {Simulating Software Evolution with Varying Numbers of Developers and Validation Using {OSS}},
	doi = {10.1109/ASWEC.2009.36},
	abstract = {An issue that has confounded the understanding of software development in the past is the role that different numbers of developers play in the construction and subsequent evolution of software. In this paper, we investigate that facet of software using a configurable simulation framework as a basis. The framework uses 'agents' to represent developers and models the costs associated with first comprehending and then applying necessary changes to a fictitious code base. It also considers agent 'memory recall' of their own code as a fundamental part of the framework and the fact that, with higher numbers of developers, maintenance of a higher proportion of other developers' code (rather than their own) is an inevitable, yet realistic aspect. Through exploration of the results and data produced by the simulation, we are able to explore 'desirable' features that are part of simulating software evolution; as a discussion of the issues raised by the framework, we provide a set of class data from four open-source systems by way of comparison and show that trends in those systems are comparable with results generated by the simulation. The paper thus provides evidence that we can use simulation tools to help model evolving systems, whether based on default settings or user-configurable settings.},
	booktitle = {Software Engineering Conference, 2009. {ASWEC} '09. Australian},
	author = {Stopford, B. and Counsell, S. and Nasseri, E.},
	month = apr,
	year = {2009},
	keywords = {Australia, Computational modeling, Costs, Developer, Development Process, High performance computing, Information systems, memory recall, Open source software, open-source systems, {OSS}, Programmable control, Programming, public domain software, simulation, software development, software engineering, software evolution, Software performance, user-configurable settings},
	pages = {13--22},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/CZWBKNGG/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/K85JRVDE/Stopford et al. - 2009 - Simulating Software Evolution with Varying Numbers.pdf:application/pdf}
}

@inproceedings{dabbish_social_2012,
	address = {New York, {NY}, {USA}},
	series = {{CSCW} '12},
	title = {Social Coding in {GitHub}: Transparency and Collaboration in an Open Software Repository},
	isbn = {978-1-4503-1086-4},
	shorttitle = {Social Coding in {GitHub}},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/2145204.2145396},
	doi = {10.1145/2145204.2145396},
	abstract = {Social applications on the web let users track and follow the activities of a large number of others regardless of location or affiliation. There is a potential for this transparency to radically improve collaboration and learning in complex knowledge-based activities. Based on a series of in-depth interviews with central and peripheral {GitHub} users, we examined the value of transparency for large-scale distributed collaborations and communities of practice. We find that people make a surprisingly rich set of social inferences from the networked activity information in {GitHub}, such as inferring someone else's technical goals and vision when they edit code, or guessing which of several similar projects has the best chance of thriving in the long term. Users combine these inferences into effective strategies for coordinating work, advancing technical skills and managing their reputation.},
	urldate = {2014-04-28},
	booktitle = {Proceedings of the {ACM} 2012 Conference on Computer Supported Cooperative Work},
	publisher = {{ACM}},
	author = {Dabbish, Laura and Stuart, Colleen and Tsay, Jason and Herbsleb, Jim},
	year = {2012},
	keywords = {awareness, Collaboration, coordination, open source software development, social computing, transparency},
	pages = {1277--1286},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/C68GMCUX/Dabbish et al. - 2012 - Social Coding in GitHub Transparency and Collabor.pdf:application/pdf}
}

@article{begel_social_2013,
	title = {Social Networking Meets Software Development: Perspectives from {GitHub}, {MSDN}, Stack Exchange, and {TopCoder}},
	volume = {30},
	issn = {0740-7459},
	shorttitle = {Social Networking Meets Software Development},
	doi = {10.1109/MS.2013.13},
	abstract = {Many successful software companies use social networking as a way to improve the services or products they provide. To gain an understanding of the role social networking plays in today's software development world, the guest editors of the January/February 2013 issue conducted semistructured interviews with leaders from four successful companies: Brian Doll, an engineer who manages {GitHub}'s marketing; Doug Laundry, a principal group program manager at Microsoft; David Fullerton, vice president of engineering at Stack Exchange; and Robert Hughes, the president and chief operating officer of {TopCoder}. The first Web extra at http://try.github.com is a video of Joel Spolsky discussing the structure, software, technology, and culture of Stack Exchange. The second Web extra at http://blip.tv/play/{gvUBgqLbRgI}.html is a video of Matthew {McCullough} and Tim Berglund demonstrating how Git not only incorporates the best features of existing source control systems but also includes unique distributed capabilities that make version control commands available without connectivity, allowing you to choose when to interact with a network. The third Web extra at http://blip.tv/play/{gvUBgqLbRgI}.html is a video of Matthew {McCullough} and Tim Berglund demonstrating how to leverage Git's powerful yet underused advanced features. The last Web extra at http://youtu.be/{SK}6TBI1bNLI is a video of Thomas Baden, Chief Information Officer, State of Minnesota, Department of Human Services, describing the experience of working on the {TopCoder} Platform and with the members of the {TopCoder} Community.},
	number = {1},
	journal = {{IEEE} Software},
	author = {Begel, A. and Bosch, J. and Storey, M.-A.},
	month = jan,
	year = {2013},
	keywords = {community, configuration management, {GitHub}, {GitHub} marketing, human factors, Internet, Marketing, Microsoft, {MSDN}, principal group program manager, second Web extra, social networking, social networking (online), Social network services, Software, software companies, software development, software engineering, source control systems, stack exchange, third Web extra, today software development world, {TopCoder}, {TopCoder} community, {TopCoder} platform, unique distributed capabilities},
	pages = {52--66},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/I6FQEQH7/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/2KRA4WKK/Begel et al. - 2013 - Social Networking Meets Software Development Pers.pdf:application/pdf}
}

@inproceedings{vasilescu_software_2014,
	address = {New York, {NY}, {USA}},
	series = {{CSCW} Companion '14},
	title = {Software Developers Are Humans, Too!},
	isbn = {978-1-4503-2541-7},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/2556420.2556833},
	doi = {10.1145/2556420.2556833},
	abstract = {Open-source communities can be seen as knowledge-sharing ecosystems: participants learn from the community and from one another, and share their knowledge through contributions to the source code repositories or by offering support to users. With the emergence and growing popularity of social media sites targeting software developers (e.g., {StackOverflow}, {GitHub}), the paths through which knowledge flows within open-source software knowledge-sharing ecosystems are also beginning to change. My dissertation research seeks to raise our understanding of these changes.},
	urldate = {2014-04-28},
	booktitle = {Proceedings of the Companion Publication of the 17th {ACM} Conference on Computer Supported Cooperative Work \&\#38; Social Computing},
	publisher = {{ACM}},
	author = {Vasilescu, Bogdan},
	year = {2014},
	keywords = {human aspects, open-source, software developers},
	pages = {97--100},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/XHAGJP3J/Vasilescu - 2014 - Software Developers Are Humans, Too!.pdf:application/pdf}
}

@inproceedings{vasilescu_stackoverflow_2013,
	title = {{StackOverflow} and {GitHub}: Associations between Software Development and Crowdsourced Knowledge},
	shorttitle = {{StackOverflow} and {GitHub}},
	doi = {10.1109/SocialCom.2013.35},
	abstract = {Stack Overflow is a popular on-line programming question and answer community providing its participants with rapid access to knowledge and expertise of their peers, especially benefitting coders. Despite the popularity of Stack Overflow, its role in the work cycle of open-source developers is yet to be understood: on the one hand, participation in it has the potential to increase the knowledge of individual developers thus improving and speeding up the development process. On the other hand, participation in Stack Overflow may interrupt the regular working rhythm of the developer, hence also possibly slow down the development process. In this paper we investigate the interplay between Stack Overflow activities and the development process, reflected by code changes committed to the largest social coding repository, {GitHub}. Our study shows that active {GitHub} committers ask fewer questions and provide more answers than others. Moreover, we observe that active Stack Overflow askers distribute their work in a less uniform way than developers that do not ask questions. Finally, we show that despite the interruptions incurred, the Stack Overflow activity rate correlates with the code changing activity in {GitHub}.},
	booktitle = {2013 International Conference on Social Computing ({SocialCom})},
	author = {Vasilescu, B. and Filkov, V. and Serebrenik, A.},
	month = sep,
	year = {2013},
	keywords = {Communities, crowdsourced knowledge, Electronic mail, {GitHub}, Indexes, Knowledge based systems, Merging, online programming question-and-answer community, Productivity, Rhythm, social coding repository, Social Media, Software, software development, software maintenance, stackoverflow},
	pages = {188--195},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/UU2NTCNW/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/6FC7UNS7/Vasilescu et al. - 2013 - StackOverflow and GitHub Associations between Sof.pdf:application/pdf}
}

@inproceedings{hong_understanding_2011,
	title = {Understanding a developer social network and its evolution},
	doi = {10.1109/ICSM.2011.6080799},
	abstract = {With the growing number of large scale software projects, software development and maintenance demands the participation of larger groups. Having a thorough understanding of the group of developers is critical for improving development and maintenance quality and reducing cost. In contrast to most commercial software endeavors, developers in open source software ({OSS}) projects enjoy more freedom to organize and contribute to a project in their own working style. Their interactions through various means in the project generate a latent developer social network ({DSN}). We have observed that developers and their relationships in these {DSNs} change continually under the influence of differences in the set of active developers and their changing activities. Revealing and understanding the structure and evolution of these social networks as well as their similarities and differences from other more general social networks ({GSNs}) is of value to our software engineering community, as it allows us to begin building an understanding of how well the findings from other fields based on {GSNs} apply to {DSN}. In this paper, we compare {DSNs} with popular {GSNs} such as Facebook, Twitter, Cyworld (a large social network in South Korea), and the Amazon recommendation network. We found, for instance, that while most social networks exhibit power law degree distributions, our {DSNs} do not. In addition, we also examine how {DSNs} evolve over time, highlighting how events within a project (such as a release of new software or the departure of prominent developers) impact the makeup of the {DSNs}, and observe the evolution of topological properties such as modularity and the paths of communities within these networks.},
	booktitle = {2011 27th {IEEE} International Conference on Software Maintenance ({ICSM})},
	author = {Hong, Qiaona and Kim, Sunghun and Cheung, S.C. and Bird, C.},
	month = sep,
	year = {2011},
	keywords = {Amazon recommendation network, Communities, community detection, Computer bugs, cost reduction, Cyworld, data mining, developer social network, Facebook, general social networks, large scale software projects, open source software projects, public domain software, social networking (online), Software, software development quality, software endeavors, software engineering community, software maintenance, software maintenance quality, twitter},
	pages = {323--332},
	file = {IEEE Xplore Abstract Record:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/AJUHS8UT/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/9ZRTKJWH/Hong et al. - 2011 - Understanding a developer social network and its e.pdf:application/pdf}
}

@inproceedings{heller_visualizing_2011,
	address = {New York, {NY}, {USA}},
	series = {{MSR} '11},
	title = {Visualizing Collaboration and Influence in the Open-source Software Community},
	isbn = {978-1-4503-0574-7},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/1985441.1985476},
	doi = {10.1145/1985441.1985476},
	abstract = {We apply visualization techniques to user profiles and repository metadata from the {GitHub} source code hosting service. Our motivation is to identify patterns within this development community that might otherwise remain obscured. Such patterns include the effect of geographic distance on developer relationships, social connectivity and influence among cities, and variation in projectspecific contribution styles (e.g., centralized vs. distributed). Our analysis examines directed graphs in which nodes represent users' geographic locations and edges represent (a) follower relationships, (b) successive commits, or (c) contributions to the same project. We inspect this data using a set of visualization techniques: geo-scatter maps, small multiple displays, and matrix diagrams. Using these representations, and tools based on them, we develop hypotheses about the larger {GitHub} community that would be difficult to discern using traditional lists, tables, or descriptive statistics. These methods are not intended to provide conclusive answers; instead, they provide a way for researchers to explore the question space and communicate initial insights.},
	urldate = {2014-04-28},
	booktitle = {Proceedings of the 8th Working Conference on Mining Software Repositories},
	publisher = {{ACM}},
	author = {Heller, Brandon and Marschner, Eli and Rosenfeld, Evan and Heer, Jeffrey},
	year = {2011},
	keywords = {Collaboration, data exploration, geoscatter, {GitHub}, mapping, open source, social graph, Visualization},
	pages = {223--226},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/73RF5NNR/Heller et al. - 2011 - Visualizing Collaboration and Influence in the Ope.pdf:application/pdf}
}