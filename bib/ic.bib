@article{rousseeuw1999fast,
  title={A fast algorithm for the minimum covariance determinant estimator},
  author={Rousseeuw, Peter J and Driessen, Katrien Van},
  journal={Technometrics},
  volume={41},
  number={3},
  pages={212--223},
  year={1999},
  publisher={Taylor \& Francis Group}
}

@inproceedings{Gousi13,
  author = {Gousios, Georgios},
  title = {The GHTorrent dataset and tool suite},
  booktitle = {Proceedings of the 10th Working Conference on Mining Software
    Repositories},
  series = {MSR '13},
  year = {2013},
  isbn = {978-1-4673-2936-1},
  location = {San Francisco, CA, USA},
  pages = {233--236},
  numpages = {4},
  url = {http://dl.acm.org/citation.cfm?id=2487085.2487132},
  acmid = {2487132},
  publisher = {IEEE Press},
  address = {Piscataway, NJ, USA},
}

@misc{recipes_devm,
    author={Julia Lawall},
    title={Automating Source Code Evolutions using Coccinelle},
    note = {Kernel Recipes -- \url{https://kernel-recipes.org/en/2013/}},
    year={2013}
}

@article{Lientz:1978:CAS:359511.359522,
 author = {Lientz, B. P. and Swanson, E. B. and Tompkins, G. E.},
 title = {Characteristics of Application Software Maintenance},
 journal = {Commun. ACM},
 issue_date = {June 1978},
 volume = {21},
 number = {6},
 month = jun,
 year = {1978},
 issn = {0001-0782},
 pages = {466--471},
 numpages = {6},
 url = {http://doi.acm.org/10.1145/359511.359522},
 doi = {10.1145/359511.359522},
 acmid = {359522},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {management and technical issues, software maintenance, use of productivity aids},
} 

@BOOK{stat2,
  title = {Engineering Statistics},
  publisher = {Wiley},
  year = {2001},
  author = {D.C. Montgomery and G.C. Runger and N.F. Hubele},
  owner = {Administrator},
  timestamp = {2009.08.22}
}

@inproceedings{VBCG_HPCS14,
  author =       {S. Varrette and P. Bouvry and H. Cartiaux and F. Georgatos},
  title =        {Management of an Academic HPC Cluster: The UL Experience},
  booktitle =    {Proc. of the 2014 Intl. Conf. on High Performance Computing \& Simulation (HPCS 2014)},
  year =         {2014},
  month =        {July},
  address =      {Bologna, Italy},
  publisher =    {IEEE},
}

@INPROCEEDINGS{Diagnosys, 
author={Bissyand\'e, T.F. and Rev\'eill\`ere, L. and Lawall, J.L. and Muller, G.}, 
booktitle={Automated Software Engineering (ASE), 2012 Proceedings of the 27th IEEE/ACM International Conference on}, 
title={Diagnosys: automatic generation of a debugging interface to the Linux kernel}, 
year={2012}, 
pages={60-69}, 
keywords={Linux;operating system kernels;program debugging;user interfaces;Diagnosys;Linux kernel;debugging interface automatic generation;external modules;kernel crash;kernel maintainer;kernel-level services;log information;Debugging;Device drivers;Diagnosys;Linux;Wrappers}, 
doi={10.1145/2351676.2351686}, 
month={Sept},}

@misc{Nielsen95,
year ={1995},
month={May},
author ={Jakob Nielsen},
title = {Card Sorting to Discover the Users' Model of the Information Space},
note ={NN/g -- \url{http://www.nngroup.com/articles/usability\ -testing-1995-sun-microsystems-website/}}
}

@misc{boxesandarrows,
year ={2004},
month={April},
author ={Donna Spencer},
title = {Card sorting: a definitive guide},
note ={\url{http://boxesandarrows.com/card-sorting-a-definitive-guide/}}
}

@inproceedings{hu_opinion_2006,
	title = {Opinion Feature Extraction Using Class Sequential Rules},
	booktitle = {Proceedings of {AAAI} 2006 Spring Sympoia on Computational Approaches to Analyzing Weblogs ({AAAI}-{CAAW} 2006)},
	author = {Hu, Minqing and Liu, Bing},
	year = {2006}
}

@article{ohana_opinion_2009,
	title = {Opinion mining with the {SentWordNet} lexical resource},
	journal = {Dissertations},
	author = {Ohana, Bruno},
	month = mar,
	year = {2009}
}

@incollection{liu_sentiment_2010,
	address = {Boca Raton, {FL}},
	title = {Sentiment Analysis and Subjectivity},
	booktitle = {Handbook of Natural Language Processing, Second Edition},
	publisher = {{CRC} Press, Taylor and Francis Group},
	author = {Liu, Bing},
	editor = {Indurkhya, Nitin and Damerau, Fred J.},
	year = {2010},
	note = {{ISBN} 978-1420085921}
}

@article{thelwall_sentiment_2010,
	title = {Sentiment strength detection in short informal text},
	volume = {61},
	copyright = {Â© 2010 {ASIS}\&T},
	language = {en},
	number = {12},
	urldate = {2012-03-06},
	journal = {Journal of the American Society for Information Science and Technology},
	author = {Thelwall, Mike and Buckley, Kevan and Paltoglou, Georgios and Cai, Di and Kappas, Arvid},
	month = dec,
	year = {2010},
	pages = {2544--2558}
}


@article{breiman_random_2001,
	title = {Random {Forests}},
	volume = {45},
	issn = {0885-6125},
	number = {1},
	urldate = {2012-10-17},
	journal = {Machine Learning},
	author = {Breiman, Leo},
	year = {2001},
	pages = {5--32}
}

@BOOK{mlbook,
  title = {Introduction to Machine Learning},
  publisher = {MIT Press},
  year = {2004},
  author = {E. Alpaydin},
  owner = {Administrator},
  timestamp = {2009.08.22}
}

@incollection{lewis:ecml:1998,
	title = {Naive ({Bayes}) at forty: {The} independence assumption in information retrieval},
	shorttitle = {Naive ({Bayes}) at forty},
	language = {en},
	booktitle = {Machine {Learning}: {ECML}-98},
	publisher = {Springer Berlin Heidelberg},
	author = {Lewis, David D.},
	month = apr,
	year = {1998},
	pages = {4--15}
}

@inproceedings{sliwerski_hatari:_2005,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE}-13},
	title = {{HATARI}: {Raising} {Risk} {Awareness}},
	booktitle = {Proceedings of the 10th {European} {Software} {Engineering} {Conference} {Held} {Jointly} with 13th {ACM} {SIGSOFT} {International} {Symposium} on {Foundations} of {Software} {Engineering}},
	publisher = {ACM},
	author = {{\'S}liwerski, Jacek and Zimmermann, Thomas and Zeller, Andreas},
	year = {2005},
	pages = {107--110}
}

@article{kim_classifying_2008,
	title = {Classifying Software Changes: Clean or Buggy?},
	volume = {34},
	shorttitle = {Classifying Software Changes},
	number = {2},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Kim, Sunghun and Whitehead, E.J. and Zhang, Yi},
	month = mar,
	year = {2008},
	pages = {181--196}
}


@inproceedings{kim_automatic_2006,
	title = {Automatic {Identification} of {Bug}-{Introducing} {Changes}},
	booktitle = {21st {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}, 2006. {ASE} '06},
	author = {Kim, Sunghun and Zimmermann, T. and Pan, Kai and Whitehead, E.J.},
	month = sep,
	year = {2006},
	pages = {81--90},
}

@inproceedings{bird_fair_2009,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} '09},
	title = {Fair and {Balanced}?: {Bias} in {Bug}-fix {Datasets}},
	booktitle = {Proceedings of the the 7th {Joint} {Meeting} of the {European} {Software} {Engineering} {Conference} and the {ACM} {SIGSOFT} {Symposium} on {The} {Foundations} of {Software} {Engineering}},
	publisher = {ACM},
	author = {Bird, Christian and Bachmann, Adrian and Aune, Eirik and Duffy, John and Bernstein, Abraham and Filkov, Vladimir and Devanbu, Premkumar},
	year = {2009},
	pages = {121--130}
}

@inproceedings{kim_memories_2006,
	address = {New York, {NY}, {USA}},
	series = {{SIGSOFT} '06/{FSE}-14},
	title = {Memories of Bug Fixes},
	booktitle = {Proceedings of the 14th {ACM} {SIGSOFT} International Symposium on Foundations of Software Engineering},
	publisher = {{ACM}},
	author = {Kim, Sunghun and Pan, Kai and Whitehead, Jr., E. E. James},
	year = {2006},
	pages = {35--45}
}

@inproceedings{jiang_personalized_2013,
	title = {Personalized defect prediction},
	booktitle = {2013 {IEEE}/{ACM} 28th International Conference on Automated Software Engineering ({ASE})},
	author = {Jiang, Tian and Tan, Lin and Kim, Sunghun},
	month = nov,
	year = {2013},
	pages = {279--289}
}

@inproceedings{kim_predicting_2007,
	address = {Washington, {DC}, {USA}},
	series = {{ICSE} '07},
	title = {Predicting Faults from Cached History},
	booktitle = {Proceedings of the 29th International Conference on Software Engineering},
	publisher = {{IEEE} Computer Society},
	author = {Kim, Sunghun and Zimmermann, Thomas and Whitehead Jr., E. James and Zeller, Andreas},
	year = {2007},
	pages = {489--498}
}

@inproceedings{shivaji_reducing_2009,
	address = {Washington, {DC}, {USA}},
	series = {{ASE} '09},
	title = {Reducing Features to Improve Bug Prediction},
	booktitle = {Proceedings of the 2009 {IEEE}/{ACM} International Conference on Automated Software Engineering},
	publisher = {{IEEE} Computer Society},
	author = {Shivaji, Shivkumar and Jr., E. James Whitehead and Akella, Ram and Kim, Sunghun},
	year = {2009},
	pages = {600--604}
}


@inproceedings{linares-vasquez_api_2013,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2013},
	title = {{API} {Change} and {Fault} {Proneness}: {A} {Threat} to the {Success} of {Android} {Apps}},
	isbn = {978-1-4503-2237-9},
	booktitle = {Proceedings of the 2013 9th {Joint} {Meeting} on {Foundations} of {Software} {Engineering}},
	author = {Linares-V{\'a}squez, Mario and Bavota, Gabriele and Bernal-C{\'a}rdenas, Carlos and Di Penta, Massimiliano and Oliveto, Rocco and Poshyvanyk, Denys},
	year = {2013},
	pages = {477--487}
}

@article{dig_how_2006,
	title = {How do {APIs} evolve? {A} story of refactoring},
	volume = {18},
	number = {2},
	journal = {Journal of Software Maintenance and Evolution: Research and Practice},
	author = {Dig, Danny and Johnson, Ralph},
	month = mar,
	year = {2006},
	pages = {83--107}
}

@inproceedings{Beyer05,
 author = {Beyer, Dirk and Noack, Andreas},
 title = {Clustering Software Artifacts Based on Frequent Common Changes},
 booktitle = {Proceedings of the 13th International Workshop on Program Comprehension},
 series = {IWPC '05},
 year = {2005},
 pages = {259--268},
} 

@article{Sabidussi66,
year={1966},
journal={Psychometrika},
volume={31},
number={4},
title={The centrality index of a graph},
publisher={Springer-Verlag},
author={Sabidussi, Gert},
pages={581-603}
}

@article{freeman07,
    author = {Freeman, Linton C.},
    journal = {Sociometry},
    month = mar,
    number = {1},
    pages = {35--41},
    publisher = {American Sociological Association},
    title = {{A Set of Measures of Centrality Based on Betweenness}},
    volume = {40},
    year = {1977}
}


@inproceedings{Brin98,
 author = {Brin, Sergey and Page, Lawrence},
 title = {The Anatomy of a Large-scale Hypertextual Web Search Engine},
 booktitle = {Proceedings of the Seventh International Conference on World Wide Web 7},
 series = {WWW7},
 year = {1998},
 address = {Brisbane, Australia},
 pages = {107--117},
} 

@inproceedings{valdivia2014characterizing,
  title={Characterizing and predicting blocking bugs in open source projects},
  author={Valdivia Garcia, Harold and Shihab, Emad},
  booktitle={Proceedings of the 11th Working Conference on Mining Software Repositories},
  pages={72--81},
  year={2014},
  organization={ACM}
}

@inproceedings{padioleau08,
     author = {Padioleau, Yoann and Lawall, Julia L. and Hansen, Ren\'{e}
                  Rydhof and Muller, Gilles},
     title = {Documenting and automating collateral evolutions in
                  {Linux} device drivers},
 booktitle = {EuroSys'08: Proceedings of the 2008 ACM SIGOPS/EuroSys European Conference on Computer Systems},
     year = {2008},
     pages = {247--260},
     address = {Glasgow, Scotland},
}

@inproceedings{Palix10Faults,
    title = {Faults in {L}inux: Ten Years Later},
    author = { {P}alix, {N}icolas and {S}aha, {S}uman and {T}homas, {G}a{\"e}l 
        and {C}alv{\`e}s, {C}hristophe and {L}awall, {J}ulia Laetitia and {M}uller, {G}illes},
    institution = {INRIA},
    booktitle = {ASPLOS'11: Proceedings of the 2011 International Conference on Architectural Support for Programming Languages and Operating Systems},
    year = {2011},
    address={Newport Beach, CA, USA}
}

@inproceedings{Padioleau06,
 author = {Padioleau, Yoann and Lawall, Julia L. and Muller, Gilles},
 title = {Understanding collateral evolution in Linux device drivers},
 booktitle = {EuroSys'06: Proceedings of the 2006 ACM SIGOPS/EuroSys European Conference on Computer Systems},
 year = {2006},
 address = {Leuven, Belgium},
 pages = {59--71},
} 

@inproceedings{girba_how_2005,
	title = {How developers drive software evolution},
	booktitle = {Eighth International Workshop on Principles of Software Evolution},
	author = {Girba, T. and Kuhn, A. and Seeberger, M. and Ducasse, S.},
	month = sep,
	year = {2005},
	pages = {113--122}
}

@inproceedings{servant_history_2012,
	address = {New York, {NY}, {USA}},
	series = {{FSE} '12},
	title = {History Slicing: Assisting Code-evolution Tasks},
	shorttitle = {History Slicing},
	urldate = {2014-06-12},
	booktitle = {Proceedings of the {ACM} {SIGSOFT} 20th International Symposium on the Foundations of Software Engineering},
	publisher = {{ACM}},
	author = {Servant, Francisco and Jones, James A.},
	year = {2012},
	pages = {43:1--43:11}
}

@inproceedings{dambros_evolution_2006,
	address = {Shanghai, China},
	series = {{MSR} '06},
	title = {The evolution radar: visualizing integrated logical coupling information},
	shorttitle = {The evolution radar},
	booktitle = {Proceedings of the 2006 international workshop on Mining software repositories},
	publisher = {{ACM}},
	author = {D'Ambros, Marco and Lanza, Michele and Lungu, Mircea},
	year = {2006},
	note = {{ACM} {ID}: 1137992},
	pages = {26--32}
}

@inproceedings{zimmermann_mining_2004,
	address = {Washington, {DC}, {USA}},
	series = {{ICSE} '04},
	title = {Mining Version Histories to Guide Software Changes},
	booktitle = {Proceedings of the 26th International Conference on Software Engineering},
	publisher = {{IEEE} Computer Society},
	author = {Zimmermann, Thomas and Weisgerber, Peter and Diehl, Stephan and Zeller, Andreas},
	year = {2004},
	pages = {563--572}
}

@article{ying_predicting_2004,
	title = {Predicting source code changes by mining change history},
	volume = {30},
	number = {9},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Ying, A.T.T. and Murphy, G.C. and Ng, R. and Chu-Carroll, M.C.},
	month = sep,
	year = {2004},
	pages = {574--586}
}

@inproceedings{herzig_mining_2011,
	title = {Mining Cause-Effect-Chains from Version Histories},
	booktitle = {2011 {IEEE} 22nd International Symposium on Software Reliability Engineering ({ISSRE})},
	author = {Herzig, K. and Zeller, A.},
	month = nov,
	year = {2011},
	pages = {60--69},
}

@inproceedings{herzig_predicting_2013,
	title = {Predicting defects using change genealogies},
	booktitle = {2013 {IEEE} 24th International Symposium on Software Reliability Engineering ({ISSRE})},
	author = {Herzig, K. and Just, S. and Rau, A. and Zeller, A.},
	month = nov,
	year = {2013},
	pages = {118--127},
}

@inproceedings{brudaru_what_2008,
	address = {New York, {NY}, {USA}},
	series = {{RSSE} '08},
	title = {What is the Long-term Impact of Changes?},
	isbn = {978-1-60558-228-3},
	booktitle = {Proceedings of the 2008 International Workshop on Recommendation Systems for Software Engineering},
	publisher = {{ACM}},
	author = {Brudaru, Irina Ioana and Zeller, Andreas},
	year = {2008},
	pages = {30--32},
}


@inproceedings{herzig_impact_2013,
	address = {Piscataway, {NJ}, {USA}},
	series = {{MSR} '13},
	title = {The Impact of Tangled Code Changes},
	isbn = {978-1-4673-2936-1},
	url = {http://dl.acm.org.proxy.bnl.lu/citation.cfm?id=2487085.2487113},
	abstract = {When interacting with version control systems, developers often commit unrelated or loosely related code changes in a single transaction. When analyzing the version history, such tangled changes will make all changes to all modules appear related, possibly compromising the resulting analyses through noise and bias. In an investigation of five open-source {JAVA} projects, we found up to 15\% of all bug fixes to consist of multiple tangled changes. Using a multi-predictor approach to untangle changes, we show that on average at least 16.6\% of all source files are incorrectly associated with bug reports. We recommend better change organization to limit the impact of tangled changes.},
	urldate = {2014-01-23},
	booktitle = {Proceedings of the 10th Working Conference on Mining Software Repositories},
	publisher = {{IEEE} Press},
	author = {Herzig, Kim and Zeller, Andreas},
	year = {2013},
	pages = {121--130},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/KMM9U5QH/Herzig and Zeller - 2013 - The Impact of Tangled Code Changes.pdf:application/pdf}
}


@inproceedings{shao_semantic_2009,
	title = {Semantic Impact and Faults in Source Code Changes: An Empirical Study},
	shorttitle = {Semantic Impact and Faults in Source Code Changes},
	doi = {10.1109/ASWEC.2009.14},
	booktitle = {Software Engineering Conference, 2009. {ASWEC} '09. Australian},
	author = {Shao, Danhua and Khurshid, S and Perry, D.E.},
	year = {2009},
	pages = {131--141},
}


@inproceedings{robillard_retrieving_2008,
	title = {Retrieving Task-Related Clusters from Change History},
	doi = {10.1109/WCRE.2008.15},
	booktitle = {15th Working Conference on Reverse Engineering, 2008. {WCRE} '08},
	author = {Robillard, M.P. and Dagenais, B.},
	year = {2008},
	pages = {17--26},
}

@inproceedings{robillard_reusing_2008,
	title = {Reusing Program Investigation Knowledge for Code Understanding},
	doi = {10.1109/ICPC.2008.10},
	booktitle = {The 16th {IEEE} International Conference on Program Comprehension, 2008. {ICPC} 2008},
	author = {Robillard, M.P. and Manggala, P.},
	year = {2008},
	pages = {202--211},
}


@inproceedings{liu_change_2011,
	address = {New York, {NY}, {USA}},
	series = {{SAC} '11},
	title = {Change Impact Analysis for Object-oriented Programs Evolved to Aspect-oriented Programs},
	isbn = {978-1-4503-0113-8},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/1982185.1982200},
	doi = {10.1145/1982185.1982200},
	abstract = {When object-oriented programs evolve to aspect-oriented programs ({AOP}), the behavior of the evolved programs can become complex and hard to understand because the aspects woven into object-oriented programs can change the original behavior of the programs in an unintended way. To ensure that no additional errors are introduced by the aspects, it is critical to retest the evolved aspect-oriented programs. The testing efforts can be significantly reduced if only the parts of the object-oriented program affected by the changes are retested. In this paper we propose a method to analyze the possible change impacts caused by woven aspects. The types of changes introduced by aspects are identified and specified. The likely impacts caused by the changes are described and computed based on various dependency relations in object-oriented programs. In particular, the influences of pointcut declarations on the locations of changes and ripple effects are addressed. An example is presented to illustrate the usefulness of the proposed method.},
	urldate = {2014-01-22},
	booktitle = {Proceedings of the 2011 {ACM} Symposium on Applied Computing},
	publisher = {{ACM}},
	author = {Liu, Chien-Hung and Chen, Shu-Ling and Jhu, Wei-Lun},
	year = {2011},
	keywords = {aspect-oriented programming, change impact analysis},
	pages = {59--65},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/IWB5HT8D/Liu et al. - 2011 - Change Impact Analysis for Object-oriented Program.pdf:application/pdf}
}

@inproceedings{ren_chianti:_2004,
	address = {New York, {NY}, {USA}},
	series = {{OOPSLA} '04},
	title = {Chianti: A Tool for Change Impact Analysis of Java Programs},
	isbn = {1-58113-831-8},
	shorttitle = {Chianti},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/1028976.1029012},
	doi = {10.1145/1028976.1029012},
	abstract = {This paper reports on the design and implementation of Chianti, a change impact analysis tool for Java that is implemented in the context of the Eclipse environment. Chianti analyzes two versions of an application and decomposes their difference into a set of atomic changes. Change impact is then reported in terms of affected (regression or unit) tests whose execution behavior may have been modified by the applied changes. For each affected test, Chianti also determines a set of affecting changes that were responsible for the test's modified behavior. This latter step of isolating the changes that induce the failure of one specific test from those changes that only affect other tests can be used as a debugging technique in situations where a test fails unexpectedly after a long editing session. We evaluated Chianti on a year (2002) of {CVS} data from M. Ernst's Daikon system, and found that, on average, 52\% of Daikon's unit tests are affected. Furthermore, each affected unit test, on average, is affected by only 3.95\% of the atomic changes. These findings suggest that our change impact analysis is a promising technique for assisting developers with program understanding and debugging.},
	urldate = {2014-01-22},
	booktitle = {Proceedings of the 19th Annual {ACM} {SIGPLAN} Conference on Object-oriented Programming, Systems, Languages, and Applications},
	publisher = {{ACM}},
	author = {Ren, Xiaoxia and Shah, Fenil and Tip, Frank and Ryder, Barbara G. and Chesley, Ophelia},
	year = {2004},
	keywords = {analysis of object-oriented programs, change impact analysis, regression test, unit test},
	pages = {432--448},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/96X7RBD9/Ren et al. - 2004 - Chianti A Tool for Change Impact Analysis of Java.pdf:application/pdf}
}

@inproceedings{sherriff_empirical_2008,
	title = {Empirical Software Change Impact Analysis using Singular Value Decomposition},
	doi = {10.1109/ICST.2008.25},
	abstract = {Verification and validation techniques often generate various forms of software development artifacts. Change records created from verification and validation efforts show how files in the system tend to change together in response to fixes for identified faults and failures. We propose a methodology for determining the impact of a new system modification by analyzing software change records through singular value decomposition. This methodology generates clusters of files that historically tend to change together to address faults and failures found in the code base. We performed a post hoc case study using this technique on five open source software systems. We determined that our technique was effective in identifying impacted files in a system from an introduced change when the developers tended to make small, targeted updates to the source system regularly. We further compared our technique against two other impact analysis techniques (Pathlmpact and Coveragelmpact) and found that our technique provided comparable results, while also identifying non-source files that could be impacted by the change.},
	booktitle = {1st International Conference on Software Testing, Verification, and Validation},
	author = {Sherriff, Mark and Williams, Laurie},
	month = apr,
	year = {2008},
	keywords = {analysis;open, change, decomposition;software, development;public, domain, empirical, impact, maintenance;, Software, software;singular, source, system;singular, value},
	pages = {268--277}
}


@inproceedings{zhang_faulttracer:_2012,
	address = {New York, {NY}, {USA}},
	series = {{FSE} '12},
	title = {{FaultTracer}: A Change Impact and Regression Fault Analysis Tool for Evolving Java Programs},
	isbn = {978-1-4503-1614-9},
	shorttitle = {{FaultTracer}},
	url = {http://doi.acm.org.proxy.bnl.lu/10.1145/2393596.2393642},
	doi = {10.1145/2393596.2393642},
	abstract = {Keeping evolving software fault-free is hard. In our previous work, we proposed {FaultTracer}, a change impact and regression fault analysis tool for evolving programs. It takes the old and new versions of a program and a regression test suite as inputs, and then identifies affected tests---a subset of tests relevant to the program differences between the two versions and affecting changes---a subset of atomic changes relevant to each affected test. It adapts spectrum-based fault localization techniques and applies them in tandem with an enhanced change impact analysis to identify and rank failure-inducing program edits. We have shown that {FaultTracer}, compared to existing techniques (e.g., Chianti), achieves improvement in selecting influenced tests, determining suspicious failure-inducing edits, and ranking failure-inducing program edits. In this paper, we show the design, implementation, and demonstration of our {FaultTracer} approach as a publicly available toolkit for testing and debugging Java programs.},
	urldate = {2014-01-22},
	booktitle = {Proceedings of the {ACM} {SIGSOFT} 20th International Symposium on the Foundations of Software Engineering},
	publisher = {{ACM}},
	author = {Zhang, Lingming and Kim, Miryung and Khurshid, Sarfraz},
	year = {2012},
	keywords = {fault localization, regression testing, software evolution},
	pages = {40:1--40:4},
	file = {ACM Full Text PDF:/Users/darkrsw/Library/Application Support/Firefox/Profiles/pn6196kn.default/zotero/storage/FKPABQ7J/Zhang et al. - 2012 - FaultTracer A Change Impact and Regression Fault .pdf:application/pdf}
}

@inproceedings{herzig_capturing_2010,
	address = {New York, {NY}, {USA}},
	series = {{ICSE} '10},
	title = {Capturing the Long-term Impact of Changes},
	urldate = {2015-02-06},
	booktitle = {Proceedings of the 32Nd {ACM}/{IEEE} International Conference on Software Engineering - Volume 2},
	publisher = {{ACM}},
	author = {Herzig, Kim Sebastian},
	year = {2010},
	pages = {393--396}
}

@inproceedings{acharya_practical_2012,
	address = {New York, {NY}, {USA}},
	series = {{FSE} '12},
	title = {Practical Change Impact Analysis Based on Static Program Slicing for Industrial Software Systems},
	urldate = {2014-01-22},
	booktitle = {Proceedings of the {ACM} {SIGSOFT} 20th International Symposium on the Foundations of Software Engineering},
	publisher = {{ACM}},
	author = {Acharya, Mithun and Robinson, Brian},
	year = {2012},
	pages = {13:1--13:2},
}

@inproceedings{yu_specifying_2011,
	address = {Washington, {DC}, {USA}},
	series = {{ASE} '11},
	title = {Specifying and Detecting Meaningful Changes in Programs},
	urldate = {2014-01-22},
	booktitle = {Proceedings of the 2011 26th {IEEE}/{ACM} International Conference on Automated Software Engineering},
	publisher = {{IEEE} Computer Society},
	author = {Yu, Yijun and Tun, Thein Than and Nuseibeh, Bashar},
	year = {2011},
	pages = {273--282},
}
